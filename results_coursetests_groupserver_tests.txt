============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 343 items

http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all FAILED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_email_handle_reusable SKIPPED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token FAILED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_changing_to_same_permission_idempotent PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token FAILED [  4%]
http_tests/auth_tests/test_auth_login.py::test_successful_login PASSED   [  5%]
http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions FAILED [  5%]
http_tests/auth_tests/test_auth_login.py::test_unregistered_user PASSED  [  5%]
http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_successful_logout PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout FAILED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-@gmail.com] PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-bob] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-bob@bob@bob.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---@gmail.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---bob] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---bob@bob@bob.com] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-@gmail.com] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob@bob@bob.com] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--@gmail.com] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob@bob@bob.com] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-@gmail.com] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-bob] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-bob@bob@bob.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---@gmail.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---bob] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---bob@bob@bob.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-@gmail.com] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob@bob@bob.com] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--@gmail.com] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob@bob@bob.com] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_email PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_successful_registration PASSED [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[Bob-Smith-bobsmith] PASSED [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_duplicate PASSED [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct FAILED [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere FAILED [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_email_sent SKIPPED [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_password PASSED [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_reset_code PASSED [ 16%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_can_addowner SKIPPED [ 16%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member FAILED [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_non_member SKIPPED [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner PASSED [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner PASSED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner PASSED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_u_id SKIPPED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id PASSED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_invalid_token PASSED [ 19%]
http_tests/channel_tests/test_channel_details.py::test_member_successful FAILED [ 19%]
http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful FAILED [ 19%]
http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id PASSED [ 20%]
http_tests/channel_tests/test_channel_details.py::test_invalid_token FAILED [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_duplicate_invite SKIPPED [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner FAILED [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_member FAILED [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member PASSED [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid PASSED [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid PASSED [ 22%]
http_tests/channel_tests/test_channel_invite.py::test_invalidated_token FAILED [ 22%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public FAILED [ 22%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private FAILED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_global_member_join_public FAILED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_already_joined_channel SKIPPED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id PASSED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_invalidated_token PASSED [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully PASSED [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member PASSED [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id PASSED [ 25%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_token FAILED [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent FAILED [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent FAILED [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected FAILED [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected FAILED [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member FAILED [ 27%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid PASSED [ 27%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given FAILED [ 27%]
http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner FAILED [ 27%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_can_remove_owner FAILED [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner PASSED [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner PASSED [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner PASSED [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner PASSED [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalid_u_id SKIPPED [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id PASSED [ 30%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token FAILED [ 30%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room] FAILED [ 30%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room] FAILED [ 30%]
http_tests/channels_tests/test_channels_create.py::test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 31%]
http_tests/channels_tests/test_channels_create.py::test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 31%]
http_tests/channels_tests/test_channels_create.py::test_invalidated_token FAILED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels PASSED [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy] PASSED [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy] PASSED [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy] PASSED [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy] PASSED [ 33%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy] PASSED [ 33%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy] PASSED [ 33%]
http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel PASSED [ 34%]
http_tests/channels_tests/test_channels_list.py::test_invalidated_token FAILED [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_no_channels PASSED [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private PASSED [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public PASSED [ 35%]
http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist PASSED [ 35%]
http_tests/channels_tests/test_channels_listall.py::test_invalidated_token FAILED [ 35%]
http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation PASSED [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single PASSED [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple FAILED [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_user PASSED    [ 37%]
http_tests/dm_tests/test_dm_create.py::test_invalid_token FAILED         [ 37%]
http_tests/dm_tests/test_dm_details.py::test_member_successful FAILED    [ 37%]
http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful PASSED [ 37%]
http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id PASSED        [ 38%]
http_tests/dm_tests/test_dm_details.py::test_invalid_token FAILED        [ 38%]
http_tests/dm_tests/test_dm_invite.py::test_duplicate_dm_invite SKIPPED  [ 38%]
http_tests/dm_tests/test_dm_invite.py::test_invite_global_member FAILED  [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_invitation_from_non_dm_member FAILED [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_dm_id_invalid PASSED         [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_u_id_invalid PASSED          [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_invalidated_token FAILED     [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully FAILED [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_leave_channel_when_not_member FAILED [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id PASSED          [ 41%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_token FAILED          [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms PASSED          [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm PASSED          [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms PASSED    [ 42%]
http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm FAILED     [ 42%]
http_tests/dm_tests/test_dm_list.py::test_invalidated_token FAILED       [ 42%]
http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent FAILED [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent FAILED [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected FAILED [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected FAILED [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member FAILED [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid PASSED [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given FAILED [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal PASSED [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages FAILED [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm FAILED [ 46%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id PASSED         [ 46%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_token FAILED         [ 46%]
http_tests/echo_tests/echo_test.py::test_echo PASSED                     [ 46%]
http_tests/echo_tests/echo_test.py::test_echo_except PASSED              [ 47%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message FAILED [ 47%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message FAILED [ 47%]
http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message FAILED [ 48%]
http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message FAILED [ 48%]
http_tests/message_tests/test_message_edit.py::test_invalid_message_length FAILED [ 48%]
http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message FAILED [ 48%]
http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit FAILED [ 49%]
http_tests/message_tests/test_message_edit.py::test_invalid_token FAILED [ 49%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique FAILED [ 49%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_in_channel FAILED [ 50%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_in_dm FAILED [ 50%]
http_tests/message_tests/test_message_pin.py::test_invalid_message_id PASSED [ 50%]
http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice FAILED [ 51%]
http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin FAILED [ 51%]
http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin FAILED [ 51%]
http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin FAILED [ 51%]
http_tests/message_tests/test_message_pin.py::test_invalid_token FAILED  [ 52%]
http_tests/message_tests/test_message_react.py::test_successful_react_in_channel FAILED [ 52%]
http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message FAILED [ 52%]
http_tests/message_tests/test_message_react.py::test_invalid_message_id PASSED [ 53%]
http_tests/message_tests/test_message_react.py::test_invalid_react_id FAILED [ 53%]
http_tests/message_tests/test_message_react.py::test_cant_react_twice FAILED [ 53%]
http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react FAILED [ 53%]
http_tests/message_tests/test_message_react.py::test_invalid_token FAILED [ 54%]
http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message FAILED [ 54%]
http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message FAILED [ 54%]
http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message FAILED [ 55%]
http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message FAILED [ 55%]
http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message FAILED [ 55%]
http_tests/message_tests/test_message_remove.py::test_invalid_token FAILED [ 55%]
http_tests/message_tests/test_message_send.py::test_valid_message FAILED [ 56%]
http_tests/message_tests/test_message_send.py::test_nonmember_post FAILED [ 56%]
http_tests/message_tests/test_message_send.py::test_invalid_channel SKIPPED [ 56%]
http_tests/message_tests/test_message_send.py::test_invalid_message PASSED [ 57%]
http_tests/message_tests/test_message_send.py::test_invalid_token FAILED [ 57%]
http_tests/message_tests/test_message_senddm.py::test_valid_message FAILED [ 57%]
http_tests/message_tests/test_message_senddm.py::test_nonmember_post FAILED [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_dm SKIPPED [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message PASSED [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_token FAILED [ 58%]
http_tests/message_tests/test_message_sendlater.py::test_valid_future_message FAILED [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_nonmeber_cannot_sendlater FAILED [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel PASSED [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_message_too_long PASSED [ 60%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_channel PASSED [ 60%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_token FAILED [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message FAILED [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py::test_nonmeber_cannot_sendlater FAILED [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel PASSED [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_message_too_long PASSED [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm PASSED [ 62%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token FAILED [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_channel FAILED [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_dm FAILED [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[True] FAILED [ 63%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[False] FAILED [ 63%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm FAILED [ 63%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel FAILED [ 64%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_channel SKIPPED [ 64%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm SKIPPED [ 64%]
http_tests/message_tests/test_message_share.py::test_invalid_og_message_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_invalid_message_length SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_channel_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_dm_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_invalid_token FAILED [ 66%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_channel FAILED [ 66%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_dm FAILED [ 66%]
http_tests/message_tests/test_message_unpin.py::test_invalid_message_id PASSED [ 67%]
http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice FAILED [ 67%]
http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin FAILED [ 67%]
http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin FAILED [ 67%]
http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin FAILED [ 68%]
http_tests/message_tests/test_message_unpin.py::test_invalid_token FAILED [ 68%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel FAILED [ 68%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message FAILED [ 69%]
http_tests/message_tests/test_message_unreact.py::test_invalid_message_id PASSED [ 69%]
http_tests/message_tests/test_message_unreact.py::test_invalid_react_id FAILED [ 69%]
http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice FAILED [ 69%]
http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact FAILED [ 70%]
http_tests/message_tests/test_message_unreact.py::test_invalid_token FAILED [ 70%]
http_tests/other_tests/test_clear.py::test_clear_works FAILED            [ 70%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification FAILED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification FAILED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_edit_triggers_notification SKIPPED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification SKIPPED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_standup_finishing_triggers_notification SKIPPED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification FAILED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification FAILED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message] FAILED [ 73%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] FAILED [ 73%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch] FAILED [ 73%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm] FAILED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification FAILED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_addowner_triggers_notification SKIPPED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification FAILED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification FAILED [ 75%]
http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched FAILED [ 75%]
http_tests/other_tests/test_notifications_get.py::test_invalid_token FAILED [ 75%]
http_tests/other_tests/test_search.py::test_no_matches PASSED            [ 76%]
http_tests/other_tests/test_search.py::test_single_match FAILED          [ 76%]
http_tests/other_tests/test_search.py::test_multiple_matches FAILED      [ 76%]
http_tests/other_tests/test_search.py::test_multiple_channels_joined FAILED [ 76%]
http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels FAILED [ 77%]
http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user FAILED [ 77%]
http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [ 77%]
http_tests/other_tests/test_search.py::test_invalid_token FAILED         [ 78%]
http_tests/other_tests/test_users_all.py::test_successful_users_all FAILED [ 78%]
http_tests/other_tests/test_users_all.py::test_invalid_token FAILED      [ 78%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True] PASSED [ 79%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False] PASSED [ 79%]
http_tests/standup_tests/test_standup_active.py::test_active_standup PASSED [ 79%]
http_tests/standup_tests/test_standup_active.py::test_inactive_standup PASSED [ 79%]
http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id PASSED [ 80%]
http_tests/standup_tests/test_standup_active.py::test_invalid_token FAILED [ 80%]
http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly FAILED [ 80%]
http_tests/standup_tests/test_standup_send.py::test_return_format PASSED [ 81%]
http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send PASSED [ 81%]
http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive PASSED [ 81%]
http_tests/standup_tests/test_standup_send.py::test_invalid_message_length PASSED [ 81%]
http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id PASSED [ 82%]
http_tests/standup_tests/test_standup_send.py::test_invalid_token FAILED [ 82%]
http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format PASSED [ 82%]
http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse PASSED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel PASSED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_creator_cannot_leave_during_startup SKIPPED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_standup_cannot_be_started_in_dm PASSED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup PASSED [ 84%]
http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active PASSED [ 84%]
http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id PASSED [ 84%]
http_tests/standup_tests/test_standup_start.py::test_invalid_token FAILED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_return_type_correct FAILED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create FAILED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join FAILED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite FAILED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave FAILED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner FAILED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create FAILED [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite FAILED [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave FAILED [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove FAILED [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send FAILED [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater FAILED [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm FAILED [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater FAILED [ 89%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share FAILED [ 89%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish FAILED [ 89%]
http_tests/stats_tests/test_user_stats.py::test_involvement_tracked FAILED [ 90%]
http_tests/stats_tests/test_user_stats.py::test_invalid_token FAILED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_user_profile_valid PASSED [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_user PASSED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_token FAILED    [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change FAILED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[a@mgail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com] PASSED [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com] PASSED [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com] PASSED [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token FAILED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change FAILED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token FAILED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name FAILED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-] PASSED [ 97%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] PASSED [ 97%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_token FAILED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0] PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000] PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token FAILED [100%]

=================================== FAILURES ===================================
________________________ test_removal_can_do_no_action _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_removal_can_do_no_action(user_woody, user_zerg, woodys_public_toybox, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_zerg.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/admin_tests/test_admin_user_remove.py:19: Failed
_____________________ test_removal_messages_correct_format _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcaeca60>
ctx = None

    def test_removal_messages_correct_format(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
>       message_factory(user_zerg, woodys_public_toybox, 'hi')

http_tests/admin_tests/test_admin_user_remove.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_removal_profile_still_fetchable _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
ctx = None

    def test_removal_profile_still_fetchable(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
>       profile = user_profile(user_woody.token, user_zerg.u_id, ctx)['user']

http_tests/admin_tests/test_admin_user_remove.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:13: in user_profile
    token=token, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
______________________ test_removal_removed_from_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_removal_removed_from_channel(user_woody, user_zerg, woodys_public_toybox, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
>       members = channel_details(user_woody.token, woodys_public_toybox.channel_id, ctx)['all_members']

http_tests/admin_tests/test_admin_user_remove.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_removal_removed_from_dm _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=0, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_removal_removed_from_dm(user_woody, user_zerg, woody_and_buzz_dm, ctx):
>       dm_invite(user_woody.token, woody_and_buzz_dm.dm_id, user_zerg.u_id, ctx)

http_tests/admin_tests/test_admin_user_remove.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:59: in dm_invite
    token=token, dm_id=dm_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_removal_not_in_users_all _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
ctx = None

    def test_removal_not_in_users_all(user_woody, user_zerg, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        users = users_all(user_woody.token, ctx)['users']
    
>       assert user_zerg.u_id not in [u['u_id'] for u in users]

http_tests/admin_tests/test_admin_user_remove.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <list_iterator object at 0x7f38bcad2550>

>   assert user_zerg.u_id not in [u['u_id'] for u in users]
E   KeyError: 'u_id'

http_tests/admin_tests/test_admin_user_remove.py:68: KeyError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           admin_user_remove(user_woody.token, user_buzz.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/admin_tests/test_admin_user_remove.py:99: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_invalid_token(user_woody, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           admin_userpermission_change(user_woody.token, user_buzz.u_id, Permissions.DREAMS_OWNER, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/admin_tests/test_admin_userpermission_change.py:50: Failed
__________________________ test_can_have_two_sessions __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_can_have_two_sessions(user_woody, ctx):
        session2 = auth_login(user_woody.email, user_woody.password, ctx)
    
        # succeeds
        assert user_profile(session2['token'], user_woody.u_id, ctx) == user_profile(user_woody.token, user_woody.u_id, ctx)
    
        assert auth_logout(session2['token'], ctx)
    
        with pytest.raises(AccessError):
            # should now fail...
>           user_profile(session2['token'], user_woody.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/auth_tests/test_auth_login.py:28: Failed
__________________________ test_not_logged_in_logout ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_not_logged_in_logout(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_woody.token, ctx) == {'is_success': False}
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/auth_tests/test_auth_logout.py:19: Failed
__________________________ test_return_format_correct __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_return_format_correct(user_woody, ctx):
>       assert auth_passwordreset_request(user_woody.email, ctx) == {}

http_tests/auth_tests/test_passwordreset_request.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:47: in auth_passwordreset_request
    email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_password_request_logs_out_everywhere ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_password_request_logs_out_everywhere(user_woody, ctx):
        sess2 = auth_login(user_woody.email, user_woody.password, ctx)
    
>       auth_passwordreset_request(user_woody.email, ctx)

http_tests/auth_tests/test_passwordreset_request.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/auth.py:47: in auth_passwordreset_request
    email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ test_channel_owner_can_addowner_when_member __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_channel_owner_can_addowner_when_member(user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
>       ch_deets = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_addowner.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_member_successful ____________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_member_successful(woodys_public_toybox, user_woody, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       ch_deets_1 = channel_details(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_details.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_non_member_not_successful ________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
ctx = None

    def test_non_member_not_successful(woodys_public_toybox, user_zerg, ctx):
        with pytest.raises(AccessError):
>           channel_details(user_zerg.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_details.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_details(user_woody.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_details.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_invite_global_owner ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_invite_global_owner(user_woody, user_zerg, zergs_private_lair, ctx):
        channel_invite(user_zerg.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)
    
>       ch_deets = channel_details(user_woody.token, zergs_private_lair.channel_id, ctx)

http_tests/channel_tests/test_channel_invite.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_invite_global_member ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_invite_global_member(user_woody, user_buzz, woodys_public_toybox, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
>       ch_deets = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_invite.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_invite.py:60: Failed
____________________ test_global_owner_join_channel_public _____________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_global_owner_join_channel_public(user_buzz, woodys_public_toybox, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       ch_deets = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_join.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ test_global_owner_join_channel_private ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_global_owner_join_channel_private(user_woody, zergs_private_lair, ctx):
        channel_join(user_woody.token, zergs_private_lair.channel_id, ctx)
    
>       ch_deets = channel_details(user_woody.token, zergs_private_lair.channel_id, ctx)

http_tests/channel_tests/test_channel_join.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_global_member_join_public ________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_global_member_join_public(woodys_public_toybox, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       ch_deets = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_join.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_leave(user_woody.token, woodys_public_toybox.channel_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channel_tests/test_channel_leave.py:33: Failed
________________________ test_under_fifty_messages_sent ________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_under_fifty_messages_sent(woodys_public_toybox, user_woody, ctx):
        message_ids = [
            message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
>           range(10)
        ]

http_tests/channel_tests/test_channel_messages.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/channel_tests/test_channel_messages.py:14: in <listcomp>
    message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_over_fifty_messages_sent _________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_over_fifty_messages_sent(woodys_public_toybox, user_woody, ctx):
        message_ids = [
            message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
>           range(51)
        ]

http_tests/channel_tests/test_channel_messages.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/channel_tests/test_channel_messages.py:27: in <listcomp>
    message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_removal_by_edit_reflected ________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_removal_by_edit_reflected(woodys_public_toybox, user_woody, ctx):
>       msg = message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy maybe?', ctx)['message_id']

http_tests/channel_tests/test_channel_messages.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_removal_by_deletion_reflected ______________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_removal_by_deletion_reflected(woodys_public_toybox, user_woody, ctx):
>       msg = message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy maybe?', ctx)['message_id']

http_tests/channel_tests/test_channel_messages.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_access_error_when_user_is_non_member ___________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
ctx = None

    def test_access_error_when_user_is_non_member(woodys_public_toybox, user_zerg, ctx):
        with pytest.raises(AccessError):
>           channel_messages(user_zerg.token, woodys_public_toybox.channel_id, 0, ctx)

http_tests/channel_tests/test_channel_messages.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:36: in channel_messages
    token=token, channel_id=channel_id, start=start
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)

http_tests/channel_tests/test_channel_messages.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:36: in channel_messages
    token=token, channel_id=channel_id, start=start
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_owner_can_remove_owner __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_owner_can_remove_owner(user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        channel_removeowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
>       ch_deets = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_global_owner_can_remove_owner ______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjJ9.UKn-EkV6_UzZHEf5UKAQSgkgNqmQwMXcx_3wpkEggGY', handle_str='buzzlightyear')
ctx = None

    def test_global_owner_can_remove_owner(user_zerg, user_woody, woodys_public_toybox, user_buzz, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        channel_addowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_zerg.u_id, ctx)
    
        channel_removeowner(user_zerg.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
>       ch_deets = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woodys_public_toybox, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channel_removeowner(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)

http_tests/channel_tests/test_channel_removeowner.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:80: in channel_removeowner
    token=token, channel_id=channel_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
_____________________ test_create_channel[True-andys room] _____________________

name = 'andys room', is_public = True
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('is_public', [True, False])
    def test_create_channel(name, is_public, user_zerg, user_woody, ctx):
        ch_id = channels_create(user_zerg.token, name, is_public, ctx)['channel_id']
>       deets = channel_details(user_zerg.token, ch_id, ctx)

http_tests/channels_tests/test_channels_create.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ test_create_channel[False-andys room] _____________________

name = 'andys room', is_public = False
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('name', ['andys room'])
    @pytest.mark.parametrize('is_public', [True, False])
    def test_create_channel(name, is_public, user_zerg, user_woody, ctx):
        ch_id = channels_create(user_zerg.token, name, is_public, ctx)['channel_id']
>       deets = channel_details(user_zerg.token, ch_id, ctx)

http_tests/channels_tests/test_channels_create.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:25: in channel_details
    token=token, channel_id=channel_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_create(user_woody.token, 'literally anything', True, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channels_tests/test_channels_create.py:38: Failed
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_list(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channels_tests/test_channels_list.py:50: Failed
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           channels_listall(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/channels_tests/test_channels_listall.py:41: Failed
________________________ test_dm_name_creation_multiple ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_dm_name_creation_multiple(user_woody, user_buzz, ctx):
        the_dm = dm_create(user_woody.token, [user_buzz.u_id], ctx)
    
>       assert the_dm['dm_name'] == ', '.join(sorted([user_woody.handle_str, user_buzz.handle_str]))
E       AssertionError: assert 'buzzlightyear,sheriffwoody' == 'buzzlightyear, sheriffwoody'
E         - buzzlightyear, sheriffwoody
E         ?               -
E         + buzzlightyear,sheriffwoody

http_tests/dm_tests/test_dm_create.py:31: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_create(user_woody.token, [], ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_create.py:42: Failed
____________________________ test_member_successful ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_member_successful(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        dm_deets = dm_details(user_buzz.token, woody_and_buzz_dm.dm_id, ctx)
    
        assert dm_deets['name'] == woody_and_buzz_dm.name
    
        sorted_members = sorted(dm_deets['members'], key=lambda m: m['handle_str'])
        sorted_users = sorted([user_buzz, user_woody], key=lambda m: m.handle_str)
    
        for detail, usr in zip(sorted_members, sorted_users):
>           assert detail['u_id'] == usr.u_id
E           KeyError: 'u_id'

http_tests/dm_tests/test_dm_details.py:20: KeyError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_details(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_details.py:41: Failed
__________________________ test_invite_global_member ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=0, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invite_global_member(user_woody, user_zerg, woody_and_buzz_dm, ctx):
>       dm_invite(user_woody.token, woody_and_buzz_dm.dm_id, user_zerg.u_id, ctx)

http_tests/dm_tests/test_dm_invite.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:59: in dm_invite
    token=token, dm_id=dm_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_invitation_from_non_dm_member ______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invitation_from_non_dm_member(user_zerg, woody_and_buzz_dm, ctx):
        with pytest.raises(AccessError):
>           dm_invite(user_zerg.token, woody_and_buzz_dm.dm_id, user_zerg.u_id, ctx)

http_tests/dm_tests/test_dm_invite.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:59: in dm_invite
    token=token, dm_id=dm_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_invalidated_token(user_woody, woody_and_buzz_dm, user_buzz, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_invite(user_woody.token, woody_and_buzz_dm.dm_id, user_buzz.u_id, ctx)

http_tests/dm_tests/test_dm_invite.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:59: in dm_invite
    token=token, dm_id=dm_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_member_leave_dm_successfully _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_member_leave_dm_successfully(user_woody, user_buzz, woody_and_buzz_dm, ctx):
>       dm_leave(user_buzz.token, woody_and_buzz_dm.dm_id, ctx)

http_tests/dm_tests/test_dm_leave.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:70: in dm_leave
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_leave_channel_when_not_member ______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_leave_channel_when_not_member(user_zerg, woody_and_buzz_dm, ctx):
        with pytest.raises(AccessError):
>           dm_leave(user_zerg.token, woody_and_buzz_dm.dm_id, ctx)

http_tests/dm_tests/test_dm_leave.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:70: in dm_leave
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_leave(user_woody.token, woody_and_buzz_dm.dm_id, ctx)

http_tests/dm_tests/test_dm_leave.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:70: in dm_leave
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_list_after_leave_dm ___________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[0], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_list_after_leave_dm(user_buzz, woody_and_buzz_dm, ctx):
>       dm_leave(user_buzz.token, woody_and_buzz_dm.dm_id, ctx)

http_tests/dm_tests/test_dm_list.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:70: in dm_leave
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalidated_token ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalidated_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_list(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_list.py:40: Failed
________________________ test_under_fifty_messages_sent ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_under_fifty_messages_sent(user_woody, woody_and_buzz_dm, ctx):
        message_ids = [
            message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
>           range(10)
        ]

http_tests/dm_tests/test_dm_messages.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/dm_tests/test_dm_messages.py:14: in <listcomp>
    message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_over_fifty_messages_sent _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_over_fifty_messages_sent(user_woody, woody_and_buzz_dm, ctx):
        message_ids = [
            message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
>           range(51)
        ]

http_tests/dm_tests/test_dm_messages.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/dm_tests/test_dm_messages.py:27: in <listcomp>
    message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy', ctx)['message_id'] for x in
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_removal_by_edit_reflected ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_removal_by_edit_reflected(user_woody, woody_and_buzz_dm, ctx):
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']

http_tests/dm_tests/test_dm_messages.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_removal_by_deletion_reflected ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_removal_by_deletion_reflected(user_woody, woody_and_buzz_dm, ctx):
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'you are a toy maybe?', ctx)['message_id']

http_tests/dm_tests/test_dm_messages.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_access_error_when_user_is_non_member ___________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_access_error_when_user_is_non_member(user_zerg, woody_and_buzz_dm, ctx):
        with pytest.raises(AccessError):
>           dm_messages(user_zerg.token, woody_and_buzz_dm.dm_id, 0, ctx)

http_tests/dm_tests/test_dm_messages.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:81: in dm_messages
    token=token, dm_id=dm_id, start=start
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_access_error_when_invalid_token_given __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_access_error_when_invalid_token_given(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)

http_tests/dm_tests/test_dm_messages.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:81: in dm_messages
    token=token, dm_id=dm_id, start=start
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_removal_removes_messages _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca30d90>
ctx = None

    def test_removal_removes_messages(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       message_factory(user_woody, woody_and_buzz_dm, 'electric')

http_tests/dm_tests/test_dm_remove.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_nonowner_cannot_remove_dm ________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[0], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_nonowner_cannot_remove_dm(user_buzz, woody_and_buzz_dm, ctx):
        with pytest.raises(AccessError):
>           dm_remove(user_buzz.token, woody_and_buzz_dm.dm_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_remove.py:32: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/dm_tests/test_dm_remove.py:46: Failed
____________________ test_original_poster_can_edit_message _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca05158>
ctx = None

    def test_original_poster_can_edit_message(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_edit.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_owner_can_edit_members_message ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb762f0>
ctx = None

    def test_owner_can_edit_members_message(user_woody, woodys_public_toybox, user_buzz, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
>       buzzs_msg = message_factory(user_buzz, woodys_public_toybox)

http_tests/message_tests/test_message_edit.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_global_owner_can_edit_members_message __________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca05a60>
ctx = None

    def test_global_owner_can_edit_members_message(user_zerg, user_woody, woodys_public_toybox, message_factory, ctx):
>       woodys_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_edit.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_empty_edit_deletes_message ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca359d8>
ctx = None

    def test_empty_edit_deletes_message(user_woody, woodys_public_toybox, message_factory, ctx):
>       woodys_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_edit.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_invalid_message_length __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb1c730>
ctx = None

    def test_invalid_message_length(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')

http_tests/message_tests/test_message_edit.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_cannot_edit_deleted_message _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e67b8>
ctx = None

    def test_cannot_edit_deleted_message(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')

http_tests/message_tests/test_message_edit.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_nonowner_nonposter_cant_edit _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca1f7b8>
ctx = None

    def test_nonowner_nonposter_cant_edit(user_woody, woodys_public_toybox, user_buzz, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
>       woodys_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_edit.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e7bf8>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_edit.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_message_ids_unique ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=0, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_message_ids_unique(user_woody, user_zerg, woody_and_buzz_dm, zergs_private_lair, ctx):
>       msg1 = message_send(user_zerg.token, zergs_private_lair.channel_id, 'hi', ctx)

http_tests/message_tests/test_message_meta.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_successful_pin_in_channel ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9f4378>
ctx = None

    def test_successful_pin_in_channel(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_pin.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_successful_pin_in_dm ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e6c80>
ctx = None

    def test_successful_pin_in_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_pin.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_cannot_pin_twice _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9a86a8>
ctx = None

    def test_cannot_pin_twice(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_pin.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_channel_member_cant_pin _________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9f42f0>
ctx = None

    def test_channel_member_cant_pin(woodys_public_toybox, user_buzz, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
>       a_msg = message_factory(user_buzz, woodys_public_toybox)

http_tests/message_tests/test_message_pin.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_dm_member_cant_pin ____________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[0], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9cfc80>
ctx = None

    def test_dm_member_cant_pin(user_buzz, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_buzz, woody_and_buzz_dm)

http_tests/message_tests/test_message_pin.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_nonmember_cant_pin ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e67b8>
ctx = None

    def test_nonmember_cant_pin(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_pin.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9f47b8>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_pin.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_successful_react_in_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca30950>
ctx = None

    def test_successful_react_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_react.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_successful_react_to_dm_message ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e6400>
ctx = None

    def test_successful_react_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_react.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalid_react_id _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca48268>
ctx = None

    def test_invalid_react_id(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_react.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_cant_react_twice _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9cf950>
ctx = None

    def test_cant_react_twice(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_react.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_nonmember_cannot_react __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb72a60>
ctx = None

    def test_nonmember_cannot_react(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_react.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca30d90>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_react.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ test_original_poster_can_remove_message ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcaecae8>
ctx = None

    def test_original_poster_can_remove_message(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_remove.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ test_owner_can_remove_members_message _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcbb2d90>
ctx = None

    def test_owner_can_remove_members_message(user_woody, woodys_public_toybox, user_buzz, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
>       buzzs_msg = message_factory(user_buzz, woodys_public_toybox)

http_tests/message_tests/test_message_remove.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ test_global_owner_can_remove_members_message _________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb5fae8>
ctx = None

    def test_global_owner_can_remove_members_message(user_zerg, user_woody, woodys_public_toybox, message_factory, ctx):
>       woodys_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_remove.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_cannot_remove_deleted_message ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcaec950>
ctx = None

    def test_cannot_remove_deleted_message(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')

http_tests/message_tests/test_message_remove.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________ test_nonowner_nonposter_cant_remove_message __________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca057b8>
ctx = None

    def test_nonowner_nonposter_cant_remove_message(user_woody, woodys_public_toybox, user_buzz, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
>       woodys_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_remove.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb728c8>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_remove.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_valid_message ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_valid_message(user_woody, woodys_public_toybox, ctx):
        msg_text = 'hello, world'
>       msg = message_send(user_woody.token, woodys_public_toybox.channel_id, msg_text, ctx)

http_tests/message_tests/test_message_send.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________________ test_nonmember_post ______________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_nonmember_post(woodys_public_toybox, user_buzz, ctx):
        with pytest.raises(AccessError):
>           message_send(user_buzz.token, woodys_public_toybox.channel_id, 'hi', ctx)

http_tests/message_tests/test_message_send.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_send(user_woody.token, woodys_public_toybox.channel_id, 'AccessError nooooooooo', ctx)

http_tests/message_tests/test_message_send.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_valid_message ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_valid_message(user_woody, woody_and_buzz_dm, ctx):
        msg_text = 'hello, world'
>       msg = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, msg_text, ctx)

http_tests/message_tests/test_message_senddm.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________________ test_nonmember_post ______________________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_nonmember_post(user_zerg, woody_and_buzz_dm, ctx):
        with pytest.raises(AccessError):
>           message_senddm(user_zerg.token, woody_and_buzz_dm.dm_id, 'hi', ctx)

http_tests/message_tests/test_message_senddm.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'AccessError nooooooooo', ctx)

http_tests/message_tests/test_message_senddm.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_valid_future_message ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_valid_future_message(user_woody, woodys_public_toybox, ctx):
        msg_text = 'hello, world'
        tts = utc_now() + 2
>       msg = message_sendlater(user_woody.token, woodys_public_toybox.channel_id, msg_text, tts, ctx)

http_tests/message_tests/test_message_sendlater.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_nonmeber_cannot_sendlater ________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_nonmeber_cannot_sendlater(user_buzz, woodys_public_toybox, ctx):
        with pytest.raises(AccessError):
>           message_sendlater(user_buzz.token, woodys_public_toybox.channel_id, 'hi', utc_now(), ctx)

http_tests/message_tests/test_message_sendlater.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
    
        with pytest.raises(AccessError):
>           message_sendlater(user_woody.token, woodys_public_toybox.channel_id, 'hi', utc_now(), ctx)

http_tests/message_tests/test_message_sendlater.py:55: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_valid_future_message ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_valid_future_message(user_woody, woody_and_buzz_dm, ctx):
        msg_text = 'hello, world'
        tts = utc_now() + 2
>       msg = message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, msg_text, tts, ctx)

http_tests/message_tests/test_message_sendlaterdm.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_nonmeber_cannot_sendlater ________________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_nonmeber_cannot_sendlater(user_zerg, woody_and_buzz_dm, ctx):
        with pytest.raises(AccessError):
>           message_sendlaterdm(user_zerg.token, woody_and_buzz_dm.dm_id, 'hi', utc_now(), ctx)

http_tests/message_tests/test_message_sendlaterdm.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_invalid_token(user_woody, woody_and_buzz_dm, ctx):
        auth_logout(user_woody.token, ctx)
    
        with pytest.raises(AccessError):
>           message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi', utc_now(), ctx)

http_tests/message_tests/test_message_sendlaterdm.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_successful_share_to_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc939950>
ctx = None

    def test_successful_share_to_channel(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')

http_tests/message_tests/test_message_share.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_successful_share_to_dm __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc94f378>
ctx = None

    def test_successful_share_to_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')

http_tests/message_tests/test_message_share.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_successful_cross_share[True] _______________________

to_ch = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc95ab70>
ctx = None

    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
>           a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')

http_tests/message_tests/test_message_share.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_successful_cross_share[False] ______________________

to_ch = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb5fae8>
ctx = None

    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
>           a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')

http_tests/message_tests/test_message_share.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_cannot_share_to_unjoined_dm _______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb76ea0>
ctx = None

    def test_cannot_share_to_unjoined_dm(user_zerg, zergs_private_lair, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_zerg, zergs_private_lair)

http_tests/message_tests/test_message_share.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ test_cannot_share_to_unjoined_channel _____________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[0], all_members=[])
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=2, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc938400>
ctx = None

    def test_cannot_share_to_unjoined_channel(user_zerg, zergs_private_lair, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_zerg, zergs_private_lair)

http_tests/message_tests/test_message_share.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e7620>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_share.py:125: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_successful_unpin_in_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca35d90>
ctx = None

    def test_successful_unpin_in_channel(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unpin.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_________________________ test_successful_unpin_in_dm __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e78c8>
ctx = None

    def test_successful_unpin_in_dm(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_unpin.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_cannot_unpin_twice ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9cff28>
ctx = None

    def test_cannot_unpin_twice(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unpin.py:47: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_channel_member_cant_unpin ________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca41ea0>
ctx = None

    def test_channel_member_cant_unpin(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
>       a_msg = message_factory(user_buzz, woodys_public_toybox)

http_tests/message_tests/test_message_unpin.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_dm_member_cant_unpin ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc94f730>
ctx = None

    def test_dm_member_cant_unpin(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_buzz, woody_and_buzz_dm)

http_tests/message_tests/test_message_unpin.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_nonmember_cant_unpin ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9cfae8>
ctx = None

    def test_nonmember_cant_unpin(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unpin.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca05048>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unpin.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________ test_successful_unreact_in_channel ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e6bf8>
ctx = None

    def test_successful_unreact_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unreact.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________ test_successful_unreact_to_dm_message _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9f42f0>
ctx = None

    def test_successful_unreact_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
>       a_msg = message_factory(user_woody, woody_and_buzz_dm)

http_tests/message_tests/test_message_unreact.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_invalid_react_id _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e6ae8>
ctx = None

    def test_invalid_react_id(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unreact.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________________ test_cant_unreact_twice ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca300d0>
ctx = None

    def test_cant_unreact_twice(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unreact.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_nonmember_cannot_unreact _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcaf3ae8>
ctx = None

    def test_nonmember_cannot_unreact(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unreact.py:77: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca07620>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/message_tests/test_message_unreact.py:84: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_______________________________ test_clear_works _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_factory = <function user_factory.<locals>.make_user at 0x7f38bca35e18>
ctx = None

    def test_clear_works(user_woody, user_factory, ctx):
        # an existing user can do something
        assert users_all(user_woody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(AccessError):
            #  ex-existing user now can't do the original action because they don't exist
            users_all(user_woody.token, ctx)
    
        loner = user_factory('bob@gmail.com', 'aweakpassword', 'name_first', 'name_last')
    
        loner_prof = user_profile(loner.token, loner.u_id, ctx).popitem()[-1]
        users = users_all(loner.token, ctx)
        chs = channels_listall(loner.token, ctx)
    
>       assert users['users'] == [loner_prof]
E       AssertionError: assert [{'auth_user_id': 0,\n  'email': 'bob@gmail.com',\n  'handle_str': 'name_firstname_last',\n  'name_first': 'name_first',\n  'name_last': 'name_last'}] == [{'email': 'bob@gmail.com',\n  'handle_str': 'name_firstname_last',\n  'name_first': 'name_first',\n  'name_last': 'name_last',\n  'profile_img_url': 'http://127.0.0.1:60811/src/static/default.jpg',\n  'u_id': 0}]
E         At index 0 diff: {'auth_user_id': 0, 'email': 'bob@gmail.com', 'name_first': 'name_first', 'name_last': 'name_last', 'handle_str': 'name_firstname_last'} != {'u_id': 0, 'email': 'bob@gmail.com', 'name_first': 'name_first', 'name_last': 'name_last', 'handle_str': 'name_firstname_last', 'profile_img_url': 'http://127.0.0.1:60811/src/static/default.jpg'}
E         Full diff:
E           [
E         +  {'auth_user_id': 0,
E         -  {'email': 'bob@gmail.com',
E         ?  ^
E         +   'email': 'bob@gmail.com',
E         ?  ^
E             'handle_str': 'name_firstname_last',
E             'name_first': 'name_first',
E         -   'name_last': 'name_last',
E         +   'name_last': 'name_last'},
E         ?                           +
E         -   'profile_img_url': 'http://127.0.0.1:60811/src/static/default.jpg',
E         -   'u_id': 0},
E           ]

http_tests/other_tests/test_clear.py:28: AssertionError
_______________ test_tag_thru_message_send_triggers_notification _______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc95c840>
ctx = None

    def test_tag_thru_message_send_triggers_notification(user_woody, woodys_public_toybox, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
>       message_factory(user_woody, woodys_public_toybox, content)

http_tests/other_tests/test_notifications_get.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ test_tag_thru_message_senddm_triggers_notification ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc910598>
ctx = None

    def test_tag_thru_message_senddm_triggers_notification(user_woody, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
>       message_factory(user_woody, woody_and_buzz_dm, content)

http_tests/other_tests/test_notifications_get.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________ test_tag_thru_message_sendlater_triggers_notification _____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e6b70>
ctx = None

    def test_tag_thru_message_sendlater_triggers_notification(user_woody, woodys_public_toybox, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
>       message_factory(user_woody, woodys_public_toybox, content, delay=1)

http_tests/other_tests/test_notifications_get.py:102: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:94: in make_message
    msg_id = message.message_sendlater(poster.token, location.channel_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________ test_tag_thru_message_sendlaterdm_triggers_notification ____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca30bf8>
ctx = None

    def test_tag_thru_message_sendlaterdm_triggers_notification(user_woody, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
>       message_factory(user_woody, woody_and_buzz_dm, content, delay=1)

http_tests/other_tests/test_notifications_get.py:117: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:92: in make_message
    msg_id = message.message_sendlaterdm(poster.token, location.dm_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________ test_tag_notification_message_preview_length[a small message] _________

content = 'a small message @sheriffwoody'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcaecae8>
ctx = None

    @pytest.mark.parametrize('content', ['a small message', 'AAAAAAA' * 50])
    def test_tag_notification_message_preview_length(content, user_woody, woodys_public_toybox, message_factory, ctx):
        # tags happen anywhere
        content += f' @{user_woody.handle_str}'
    
>       message_factory(user_woody, woodys_public_toybox, content)

http_tests/other_tests/test_notifications_get.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_ test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] _

content = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA @sheriffwoody'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca070d0>
ctx = None

    @pytest.mark.parametrize('content', ['a small message', 'AAAAAAA' * 50])
    def test_tag_notification_message_preview_length(content, user_woody, woodys_public_toybox, message_factory, ctx):
        # tags happen anywhere
        content += f' @{user_woody.handle_str}'
    
>       message_factory(user_woody, woodys_public_toybox, content)

http_tests/other_tests/test_notifications_get.py:135: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_react_triggers_notification[ch] _____________________

dest = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca05d90>
ctx = None

    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
>       a_msg = message_factory(user_woody, dest)

http_tests/other_tests/test_notifications_get.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_react_triggers_notification[dm] _____________________

dest = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca35510>
ctx = None

    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
>       a_msg = message_factory(user_woody, dest)

http_tests/other_tests/test_notifications_get.py:149: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ test_add_thru_ch_invite_triggers_notification _________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcaf3ae8>
ctx = None

    def test_add_thru_ch_invite_triggers_notification(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_invite(user_woody.token, woodys_public_toybox.channel_id, user_buzz.u_id, ctx)
    
>       notifs = notifications_get(user_buzz.token, ctx)

http_tests/other_tests/test_notifications_get.py:165: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:55: in notifications_get
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ test_add_thru_dm_create_triggers_notification _________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_add_thru_dm_create_triggers_notification(user_woody, user_buzz, woody_and_buzz_dm, ctx):
>       buzzs_notifs = notifications_get(user_buzz.token, ctx)

http_tests/other_tests/test_notifications_get.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:55: in notifications_get
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________ test_add_thru_dm_invite_triggers_notification _________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=0, members=[2], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_add_thru_dm_invite_triggers_notification(user_woody, user_zerg, woody_and_buzz_dm, ctx):
>       dm_invite(user_woody.token, woody_and_buzz_dm.dm_id, user_zerg.u_id, ctx)

http_tests/other_tests/test_notifications_get.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:59: in dm_invite
    token=token, dm_id=dm_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_most_recent_20_notifications_fetched ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb76840>
ctx = None

    def test_most_recent_20_notifications_fetched(user_woody, woodys_public_toybox, message_factory, ctx):
        expected = {'notifications': []}
        for ix in range(30):
            content = f'@{user_woody.handle_str} {ix}'
>           message_factory(user_woody, woodys_public_toybox, content)

http_tests/other_tests/test_notifications_get.py:213: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           notifications_get(user_woody.token, ctx)

http_tests/other_tests/test_notifications_get.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:55: in notifications_get
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_single_match _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb72730>
ctx = None

    def test_single_match(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox, 'anything')

http_tests/other_tests/test_search.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
____________________________ test_multiple_matches _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bcb5f158>
ctx = None

    def test_multiple_matches(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox, 'any 1')

http_tests/other_tests/test_search.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
________________________ test_multiple_channels_joined _________________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=0, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=2, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc939488>
ctx = None

    def test_multiple_channels_joined(user_zerg, woodys_public_toybox, zergs_private_lair, message_factory, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
>       in_woody = message_factory(user_zerg, woodys_public_toybox, 'any 1')

http_tests/other_tests/test_search.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_search_includes_only_joined_channels ___________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=0, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca48378>
ctx = None

    def test_search_includes_only_joined_channels(user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       message_factory(user_buzz, woodys_public_toybox, 'anything')

http_tests/other_tests/test_search.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________ test_search_matches_more_than_just_authorised_user ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9e79d8>
ctx = None

    def test_search_matches_more_than_just_authorised_user(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
>       message_factory(user_buzz, woodys_public_toybox, 'hi')

http_tests/other_tests/test_search.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           search(user_woody.token, 'anything', ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/other_tests/test_search.py:102: Failed
__________________________ test_successful_users_all ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
ctx = None

    def test_successful_users_all(user_woody, user_buzz, ctx):
        users = users_all(user_woody.token, ctx)['users']
        users.sort(key=lambda u: u['handle_str'])
    
        for detail, usr in zip(users, (user_buzz, user_woody)):
>           assert detail['u_id'] == usr.u_id
E           KeyError: 'u_id'

http_tests/other_tests/test_users_all.py:16: KeyError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           users_all(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/other_tests/test_users_all.py:26: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           standup_active(user_woody.token, woodys_public_toybox.channel_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/standup_tests/test_standup_active.py:47: Failed
________________ test_messages_buffered_and_displayed_correctly ________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f38bca48d08>
ctx = None

    def test_messages_buffered_and_displayed_correctly(user_woody, user_buzz, woodys_public_toybox, standup_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        std = standup_factory(user_woody, woodys_public_toybox, 1)
    
        standup_send(user_woody.token, woodys_public_toybox.channel_id, 'welcome', ctx)
        standup_send(user_buzz.token, woodys_public_toybox.channel_id, 'to the', ctx)
        standup_send(user_woody.token, woodys_public_toybox.channel_id, 'black parade', ctx)
    
        sleep(2)
    
>       ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)['messages']

http_tests/standup_tests/test_standup_send.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/channel.py:36: in channel_messages
    token=token, channel_id=channel_id, start=start
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           standup_send(user_woody.token, woodys_public_toybox.channel_id, '1', ctx)

http_tests/standup_tests/test_standup_send.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/standup.py:35: in standup_send
    token=token, channel_id=channel_id, message=message
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           standup_start(user_woody.token, woodys_public_toybox.channel_id, 15, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/standup_tests/test_standup_start.py:76: Failed
___________________________ test_return_type_correct ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_return_type_correct(user_woody, ctx):
        stats = user_stats(user_woody.token, ctx)
    
>       assert 'user_stats' in stats
E       AssertionError: assert 'user_stats' in {'channels_joined': [{'num_channels_joined': 0, 'timestamp': 1618948571}], 'dms_joined': [{'num_dms_joined': 0, 'timestamp': 1618948571}], 'involvement_rate': 0, 'messages_sent': [{'num_messages_sent': 0, 'timestamp': 1618948571}]}

http_tests/stats_tests/test_user_stats.py:19: AssertionError
____________________ test_channels_tracked_channels_create _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7f38bc9159d8>
ctx = None

    def test_channels_tracked_channels_create(user_woody, channel_factory, ctx):
        channel_factory(user_woody, 'poop', True)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:40: KeyError
______________________ test_channels_tracked_channel_join ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_channels_tracked_channel_join(user_woody, zergs_private_lair, ctx):
        channel_join(user_woody.token, zergs_private_lair.channel_id, ctx)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:50: KeyError
_____________________ test_channels_tracked_channel_invite _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_channels_tracked_channel_invite(user_woody, user_zerg, zergs_private_lair, ctx):
        channel_invite(user_zerg.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:60: KeyError
_____________________ test_channels_tracked_channel_leave ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
ctx = None

    def test_channels_tracked_channel_leave(user_woody, woodys_public_toybox, ctx):
        channel_leave(user_woody.token, woodys_public_toybox.channel_id, ctx)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:70: KeyError
___________________ test_channels_tracked_channel_add_owner ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_channels_tracked_channel_add_owner(user_woody, user_zerg, zergs_private_lair, ctx):
        channel_addowner(user_zerg.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)
    
>       ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:80: KeyError
__________________________ test_dms_tracked_dm_create __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
dm_factory = <function dm_factory.<locals>.make_dm at 0x7f38bc939d08>
ctx = None

    def test_dms_tracked_dm_create(user_woody, dm_factory, ctx):
        dm_factory(user_woody, [])
    
>       dm_stats = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:90: KeyError
__________________________ test_dms_tracked_dm_invite __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
dm_factory = <function dm_factory.<locals>.make_dm at 0x7f38bca41840>
ctx = None

    def test_dms_tracked_dm_invite(user_woody, user_buzz, dm_factory, ctx):
        the_dm = dm_factory(user_buzz, [])
>       dm_invite(user_buzz.token, the_dm.dm_id, user_woody.u_id, ctx)

http_tests/stats_tests/test_user_stats.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:59: in dm_invite
    token=token, dm_id=dm_id, u_id=u_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_dms_tracked_dm_leave ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_dms_tracked_dm_leave(user_woody, woody_and_buzz_dm, ctx):
>       dm_leave(user_woody.token, woody_and_buzz_dm.dm_id, ctx)

http_tests/stats_tests/test_user_stats.py:109: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:70: in dm_leave
    token=token, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________________ test_dms_tracked_dm_remove __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...LCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
ctx = None

    def test_dms_tracked_dm_remove(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
>       dm_stats_woody = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:121: KeyError
______________________ test_messages_tracked_message_send ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca41ea0>
ctx = None

    def test_messages_tracked_message_send(user_woody, woodys_public_toybox, message_factory, ctx):
>       message_factory(user_woody, woodys_public_toybox)

http_tests/stats_tests/test_user_stats.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
___________________ test_messages_tracked_message_sendlater ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca78ae8>
ctx = None

    def test_messages_tracked_message_sendlater(user_woody, woodys_public_toybox, message_factory, ctx):
>       message_factory(user_woody, woodys_public_toybox, delay=1)

http_tests/stats_tests/test_user_stats.py:141: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:94: in make_message
    msg_id = message.message_sendlater(poster.token, location.channel_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:113: in message_sendlater
    token=token, channel_id=channel_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_messages_tracked_message_senddm _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca302f0>
ctx = None

    def test_messages_tracked_message_senddm(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       message_factory(user_woody, woody_and_buzz_dm)

http_tests/stats_tests/test_user_stats.py:153: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:97: in make_message
    msg_id = message.message_senddm(poster.token, location.dm_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:102: in message_senddm
    token=token, dm_id=dm_id, message=msg
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
__________________ test_messages_tracked_message_senddmlater ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=0, members=[1], name='buzzlightyear,sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f38bc9389d8>
ctx = None

    def test_messages_tracked_message_senddmlater(user_woody, woody_and_buzz_dm, message_factory, ctx):
>       message_factory(user_woody, woody_and_buzz_dm, delay=1)

http_tests/stats_tests/test_user_stats.py:163: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:92: in make_message
    msg_id = message.message_sendlaterdm(poster.token, location.dm_id, content, tts, ctx).popitem()[-1]
http_tests/fakepi/message.py:124: in message_sendlaterdm
    token=token, dm_id=dm_id, message=msg, time_sent=time_to_send
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_messages_tracked_message_share ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f38bca302f0>
ctx = None

    def test_messages_tracked_message_share(user_woody, woodys_public_toybox, message_factory, ctx):
>       a_msg = message_factory(user_woody, woodys_public_toybox)

http_tests/stats_tests/test_user_stats.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fixtures.py:99: in make_message
    msg_id = message.message_send(poster.token, location.channel_id, content, ctx).popitem()[-1]
http_tests/fakepi/message.py:13: in message_send
    token=token, channel_id=channel_id, message=msg_content
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
_____________________ test_messages_tracked_standup_finish _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[0], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f38bc9387b8>
ctx = None

    def test_messages_tracked_standup_finish(user_woody, woodys_public_toybox, standup_factory, ctx):
        standup_factory(user_woody, woodys_public_toybox, 1)
        standup_send(user_woody.token, woodys_public_toybox.channel_id, 'hi', ctx)
    
        sleep(1.5)
    
>       msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:191: KeyError
___________________________ test_involvement_tracked ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...KV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjF9.kroJyzTgA50m0v_W7JcRr2ADgzRYmfSpUjJYg5rCH2w', handle_str='lordzerg')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7f38bc95c840>
ctx = None

    def test_involvement_tracked(user_woody, user_zerg, channel_factory, ctx):
>       stats = user_stats(user_woody.token, ctx)['user_stats']
E       KeyError: 'user_stats'

http_tests/stats_tests/test_user_stats.py:199: KeyError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_stats(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/stats_tests/test_user_stats.py:216: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile(user_woody.token, user_woody.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/user_tests/test_user_profile.py:29: Failed
_________________________ test_successful_email_change _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_successful_email_change(user_woody, ctx):
        new_email = 'toystory3@pixar.com'
        user_profile_setemail(user_woody.token, new_email, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['email'] == new_email
E       AssertionError: assert 'sheriff.woody@andysroom.com' == 'toystory3@pixar.com'
E         - toystory3@pixar.com
E         + sheriff.woody@andysroom.com

http_tests/user_tests/test_user_profile_setemail.py:17: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_setemail(user_woody.token, user_woody.email, ctx)

http_tests/user_tests/test_user_profile_setemail.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:35: in user_profile_setemail
    token=token, email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
________________________ test_successful_handle_change _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_successful_handle_change(user_woody, ctx):
        new_handle = 'www'
        user_profile_sethandle(user_woody.token, new_handle, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['handle_str'] == new_handle
E       AssertionError: assert 'sheriffwoody' == 'www'
E         - www
E         + sheriffwoody

http_tests/user_tests/test_user_profile_sethandle.py:17: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_sethandle(user_woody.token, user_woody.handle_str, ctx)

http_tests/user_tests/test_user_profile_sethandle.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:46: in user_profile_sethandle
    token=token, handle_str=handle_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
_____________________ test_user_profile_setname_valid_name _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_user_profile_setname_valid_name(user_woody, ctx):
        #  woody became japanese with family coming first
        user_profile_setname(user_woody.token, user_woody.name_last, user_woody.name_first, ctx)
    
        deets = user_profile(user_woody.token, user_woody.u_id, ctx).popitem()[-1]
    
>       assert deets['name_first'] == user_woody.name_last
E       AssertionError: assert 'sheriff' == 'woody'
E         - woody
E         + sheriff

http_tests/user_tests/test_user_profile_setname.py:17: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_setname(user_woody.token, user_woody.name_last, user_woody.name_first, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/user_tests/test_user_profile_setname.py:31: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=0, token=...iLCJhbGciOiJIUzI1NiJ9.eyJhdXRoX3VzZXJfaWQiOjB9.Mq1nNxYtZmEiY7YLlnsFJFiktFFokL24_OastLVcrxA', handle_str='sheriffwoody')
img = IMG(url='https://gitlab.cse.unsw.edu.au/uploads/-/system/appearance/header_logo/1/unsw_logo_2016.jpg', xmin=0, ymin=0, xmax=144, ymax=61)
ctx = None

    def test_invalid_token(user_woody, img, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_uploadphoto(user_woody.token, img.url, img.xmin, img.ymin, img.xmax, img.ymax, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/user_tests/test_user_profile_uploadphoto.py:51: Failed
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token
FAILED http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token
FAILED http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions
FAILED http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere
FAILED http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member
FAILED http_tests/channel_tests/test_channel_details.py::test_member_successful
FAILED http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful
FAILED http_tests/channel_tests/test_channel_details.py::test_invalid_token
FAILED http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner
FAILED http_tests/channel_tests/test_channel_invite.py::test_invite_global_member
FAILED http_tests/channel_tests/test_channel_invite.py::test_invalidated_token
FAILED http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public
FAILED http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private
FAILED http_tests/channel_tests/test_channel_join.py::test_global_member_join_public
FAILED http_tests/channel_tests/test_channel_leave.py::test_invalid_token - F...
FAILED http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent
FAILED http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
FAILED http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected
FAILED http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected
FAILED http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member
FAILED http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_can_remove_owner
FAILED http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room]
FAILED http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room]
FAILED http_tests/channels_tests/test_channels_create.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_list.py::test_invalidated_token
FAILED http_tests/channels_tests/test_channels_listall.py::test_invalidated_token
FAILED http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple
FAILED http_tests/dm_tests/test_dm_create.py::test_invalid_token - Failed: DI...
FAILED http_tests/dm_tests/test_dm_details.py::test_member_successful - KeyEr...
FAILED http_tests/dm_tests/test_dm_details.py::test_invalid_token - Failed: D...
FAILED http_tests/dm_tests/test_dm_invite.py::test_invite_global_member - htt...
FAILED http_tests/dm_tests/test_dm_invite.py::test_invitation_from_non_dm_member
FAILED http_tests/dm_tests/test_dm_invite.py::test_invalidated_token - http_t...
FAILED http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully
FAILED http_tests/dm_tests/test_dm_leave.py::test_leave_channel_when_not_member
FAILED http_tests/dm_tests/test_dm_leave.py::test_invalid_token - http_tests....
FAILED http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm - http_t...
FAILED http_tests/dm_tests/test_dm_list.py::test_invalidated_token - Failed: ...
FAILED http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent
FAILED http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected
FAILED http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected
FAILED http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member
FAILED http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given
FAILED http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages
FAILED http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm
FAILED http_tests/dm_tests/test_dm_remove.py::test_invalid_token - Failed: DI...
FAILED http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message
FAILED http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message
FAILED http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message
FAILED http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message
FAILED http_tests/message_tests/test_message_edit.py::test_invalid_message_length
FAILED http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message
FAILED http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit
FAILED http_tests/message_tests/test_message_edit.py::test_invalid_token - ht...
FAILED http_tests/message_tests/test_message_meta.py::test_message_ids_unique
FAILED http_tests/message_tests/test_message_pin.py::test_successful_pin_in_channel
FAILED http_tests/message_tests/test_message_pin.py::test_successful_pin_in_dm
FAILED http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice - ...
FAILED http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin
FAILED http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin
FAILED http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin
FAILED http_tests/message_tests/test_message_pin.py::test_invalid_token - htt...
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_in_channel
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message
FAILED http_tests/message_tests/test_message_react.py::test_invalid_react_id
FAILED http_tests/message_tests/test_message_react.py::test_cant_react_twice
FAILED http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react
FAILED http_tests/message_tests/test_message_react.py::test_invalid_token - h...
FAILED http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message
FAILED http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message
FAILED http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message
FAILED http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message
FAILED http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message
FAILED http_tests/message_tests/test_message_remove.py::test_invalid_token - ...
FAILED http_tests/message_tests/test_message_send.py::test_valid_message - ht...
FAILED http_tests/message_tests/test_message_send.py::test_nonmember_post - h...
FAILED http_tests/message_tests/test_message_send.py::test_invalid_token - ht...
FAILED http_tests/message_tests/test_message_senddm.py::test_valid_message - ...
FAILED http_tests/message_tests/test_message_senddm.py::test_nonmember_post
FAILED http_tests/message_tests/test_message_senddm.py::test_invalid_token - ...
FAILED http_tests/message_tests/test_message_sendlater.py::test_valid_future_message
FAILED http_tests/message_tests/test_message_sendlater.py::test_nonmeber_cannot_sendlater
FAILED http_tests/message_tests/test_message_sendlater.py::test_invalid_token
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_nonmeber_cannot_sendlater
FAILED http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_channel
FAILED http_tests/message_tests/test_message_share.py::test_successful_share_to_dm
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel
FAILED http_tests/message_tests/test_message_share.py::test_invalid_token - h...
FAILED http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_channel
FAILED http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_dm
FAILED http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice
FAILED http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin
FAILED http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin
FAILED http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin
FAILED http_tests/message_tests/test_message_unpin.py::test_invalid_token - h...
FAILED http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel
FAILED http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message
FAILED http_tests/message_tests/test_message_unreact.py::test_invalid_react_id
FAILED http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice
FAILED http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact
FAILED http_tests/message_tests/test_message_unreact.py::test_invalid_token
FAILED http_tests/other_tests/test_clear.py::test_clear_works - AssertionErro...
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message]
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch]
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm]
FAILED http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
FAILED http_tests/other_tests/test_notifications_get.py::test_invalid_token
FAILED http_tests/other_tests/test_search.py::test_single_match - http_tests....
FAILED http_tests/other_tests/test_search.py::test_multiple_matches - http_te...
FAILED http_tests/other_tests/test_search.py::test_multiple_channels_joined
FAILED http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
FAILED http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user
FAILED http_tests/other_tests/test_search.py::test_invalid_token - Failed: DI...
FAILED http_tests/other_tests/test_users_all.py::test_successful_users_all - ...
FAILED http_tests/other_tests/test_users_all.py::test_invalid_token - Failed:...
FAILED http_tests/standup_tests/test_standup_active.py::test_invalid_token - ...
FAILED http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly
FAILED http_tests/standup_tests/test_standup_send.py::test_invalid_token - ht...
FAILED http_tests/standup_tests/test_standup_start.py::test_invalid_token - F...
FAILED http_tests/stats_tests/test_user_stats.py::test_return_type_correct - ...
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish
FAILED http_tests/stats_tests/test_user_stats.py::test_involvement_tracked - ...
FAILED http_tests/stats_tests/test_user_stats.py::test_invalid_token - Failed...
FAILED http_tests/user_tests/test_user_profile.py::test_invalid_token - Faile...
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name
FAILED http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token
================= 170 failed, 151 passed, 22 skipped in 33.92s =================
